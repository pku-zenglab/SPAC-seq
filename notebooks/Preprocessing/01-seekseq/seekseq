#!/bin/bash

# Run Stero-seq Preprocessing Pipeline
# Last Modified 2024-04-12
# Changelog:
#   Pipeline script
#   Tuned Seekseq-adv.py
###############################
show_usage() {
    echo "Usage: $0 -i <in1> <in2> -o <out> [options]"
    echo "-"
    echo "Required:"
    echo "  -i <read1FileName> <read2FileName>  Name of input Fastq File"
    echo "  -o <out1FileName> <out2FileName>    Name of ouput Fastq File"
    echo "Optional:"
    echo "  -@ <threads>                        preferred max threads, default: 8"
    echo "  -t                                  Format Illumina RN to MGI"
    echo "  -c <constant_sequence>              Constant Sequence in R1, default: TGGTCTTCCTAAGAC"
    echo "  -s <scaffold_sequence>              Scaffold Sequence in R2, default: GTTTTAGA"
    echo "  -e <error_rate>                     Max Error Count in Matching, defualt: 1"
}

# default value
const_seq=TTGTCTTCCTAAGAC
scaffold_seq=GTTTTAGA
error_rate=1
max_threads=8

while [[ $# -gt 0 ]]; do
    case $1 in
        -@)
            if [[ $# -lt 2 ]]; then
                echo "Error: Missing argument for -@"
                show_usage
                exit 1
            fi
            max_threads=$2
            shift ;;
        -c)
            if [[ $# -lt 2 ]]; then
                echo "Error: Missing argument for -c"
                show_usage
                exit 1
            fi
            const_seq=$2
            shift ;;
        -s)
            if [[ $# -lt 2 ]]; then
                echo "Error: Missing argument for -s"
                show_usage
                exit 1
            fi
            scaffold_seq=$2
            shift ;;
        -e)
            if [[ $# -lt 2 ]]; then
                echo "Error: Missing argument for -e"
                show_usage
                exit 1
            fi
            error_rate=$2
            shift ;;
        -t)
            format_readnames=1 ;;
        -i)
            if [[ $# -lt 3 ]]; then
                echo "Error: Wrong Number of Parameters for -i"
                show_usage
                exit 1
            fi
            readFile1=$2
            readFile2=$3
            shift 2 ;;
        -o)
            if [[ $# -lt 3 ]]; then
                echo "Error: Wrong Number of Parameters for -o"
                show_usage
            fi
            outputFile1=$2
            outputFile2=$3
            shift 2 ;;
        *)
            echo "Invalid option $1" >&2
            show_usage
            exit 1 ;;
    esac
    shift
done

if [ ! -v readFile1 ] || [ ! -v readFile2 ]; then
    echo "Error: No input file provided"; echo ""
    show_usage
    exit 1
fi
if [ ! -v outputFile1 ] || [ ! -v outputFile2 ]; then
    echo "Error: No output file provided"; echo ""
    show_usage
    exit 1
fi

readFile1List=$(echo $readFile1 | tr ',' ' ')
readFile2List=$(echo $readFile2 | tr ',' ' ')
outputFile1List=$(echo $outputFile1 | tr ',' ' ')
outputFile2List=$(echo $outputFile2 | tr ',' ' ')
length=${#readFile1List[@]}
if [[ $length -ne ${#readFile2List[@]} ]]; then
    echo "Fastq file list do not match"
    exit 1
fi

dataOutputDir=$(cd $(dirname $outputFile1List[0]); pwd)

for (( i=0; i<$length; i++ )); do

    readFile1New=$(basename ${readFile1List[i]})
    readFile2New=$(basename ${readFile2List[i]})

    #echo "reverse complement reads..."
    zcat ${readFile1List[i]} | seqkit seq -pr -j $max_threads -o $dataOutputDir/RC_$readFile1New
    zcat ${readFile2List[i]} | seqkit seq -pr -j $max_threads -o $dataOutputDir/RC_$readFile2New

    #echo "splitting fastq reads..."
    /usr/local/python3/bin/python3 /usr/local/bin/seekseq-adv.py -i $dataOutputDir/RC_$readFile2New,$dataOutputDir/RC_$readFile1New -o $dataOutputDir/trans_$readFile1New,$dataOutputDir/trans_$readFile2New -c $const_seq -s $scaffold_seq -e $error_rate

    if [ -v format_readnames ]; then
        #echo "foramatting read names..."
        /usr/local/python3/bin/python3 /usr/local/bin/fromIllumina2MGI.py -i $dataOutputDir/trans_$readFile1New,$dataOutputDir/trans_$readFile2New -o ${outputFile1List[i]},${outputFile2List[i]}
    fi

done